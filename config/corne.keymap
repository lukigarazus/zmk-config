/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        hold_layer: hold_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    combos {
        compatible = "zmk,combos";

        toggle_win {
            bindings = <&tog 3>;
            key-positions = <20 21 22 23>;
        };

        lgui_home_mod {
            bindings = <&kp LGUI>;
            key-positions = <15 16>;
        };

        lcrtl_home_mod {
            bindings = <&kp LCTL>;
            key-positions = <15 16>;
            layers = <3>;
        };

        lshift_home_mod {
            bindings = <&kp LSHIFT>;
            key-positions = <14 15>;
        };

        lalt_home_mod {
            bindings = <&kp LALT>;
            key-positions = <13 14>;
        };

        rgui_home_mod {
            bindings = <&kp RGUI>;
            key-positions = <19 20>;
        };

        rctl_home_mod {
            bindings = <&kp RCTL>;
            key-positions = <19 20>;
            layers = <3>;
        };

        rshift_home_mod {
            bindings = <&kp RSHIFT>;
            key-positions = <20 21>;
        };

        ralt_home_mod {
            bindings = <&kp RALT>;
            key-positions = <21 22>;
        };

        opening_square_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <7 8>;
        };

        closing_square_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <8 9>;
        };

        opening_curly_bracket {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <31 32>;
        };

        closing_curly_bracket {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <32 33>;
        };

        opening_paren {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <2 3>;
        };

        closing_paren {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <3 4>;
        };

        opening_angle_bracket {
            bindings = <&kp LS(COMMA)>;
            key-positions = <26 27>;
        };

        closing_angle_bracket {
            bindings = <&kp RS(DOT)>;
            key-positions = <27 28>;
        };

        single_quote {
            bindings = <&kp SQT>;
            key-positions = <31 33>;
        };

        double_quote {
            bindings = <&kp DQT>;
            key-positions = <7 9>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <7 8 9>;
        };

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <31 32 33>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <2 4>;
        };

        backslash {
            bindings = <&kp BSLH>;
            key-positions = <26 28>;
        };

        tilde {
            bindings = <&kp TILD>;
            key-positions = <2 3 4>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <26 27 28>;
        };

        clearbt {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <6 10>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC    &kp Q  &kp W  &kp F     &kp P                &kp B                &kp J    &kp L  &kp U      &kp Y    &trans    &kp BSPC
&mo 1      &kp A  &kp R  &kp S     &kp T                &kp G                &kp M    &kp N  &kp E      &kp I    &kp O     &kp RET
&kp LSHFT  &kp Z  &kp X  &kp C     &kp D                &kp V                &kp K    &kp H  &kp COMMA  &kp DOT  &kp FSLH  &kp RSHIFT
                         &kp LGUI  &hold_layer 6 SPACE  &hold_layer 5 TAB    &kp RET  &mo 4  &kp RALT
            >;
        };

        mac_shortcut_layer {
            bindings = <
&trans  &kp LG(Q)  &kp LG(W)  &kp LC(E)  &kp LG(R)  &kp LG(T)    &kp LG(Y)  &kp LG(U)  &kp LG(I)      &kp LG(O)    &kp LG(P)      &trans
&trans  &kp LG(A)  &kp LC(S)  &kp LC(D)  &kp LC(F)  &kp LC(G)    &kp LEFT   &kp DOWN   &kp UP         &kp RIGHT    &trans         &trans
&trans  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(B)    &kp LG(N)  &kp LG(M)  &kp LG(COMMA)  &kp LG(DOT)  &kp LG(SLASH)  &trans
                              &trans     &trans     &trans       &trans     &trans     &trans
            >;
        };

        win_shortcut_layer {
            bindings = <
&trans  &kp LG(Q)  &kp LG(W)  &kp LC(E)  &kp LG(R)  &kp LG(T)    &kp LG(Y)  &kp LG(U)  &kp LG(I)      &kp LG(O)    &kp LG(P)      &trans
&trans  &kp R      &kp LC(S)  &kp LC(D)  &kp LC(F)  &kp LC(G)    &kp LEFT   &kp DOWN   &kp UP         &kp RIGHT    &trans         &trans
&trans  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(B)    &kp LG(N)  &kp LG(M)  &kp LG(COMMA)  &kp LG(DOT)  &kp LG(SLASH)  &trans
                              &trans     &trans     &trans       &trans     &trans     &trans
            >;
        };

        win_dummy_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        numpad_layer {
            bindings = <
&trans  &trans  &kp N7  &kp N8  &kp N9     &trans       &trans  &trans      &trans  &trans  &trans  &trans
&trans  &trans  &kp N4  &kp N5  &kp N6     &trans       &trans  &kp RSHIFT  &trans  &trans  &trans  &trans
&trans  &trans  &kp N1  &kp N2  &kp N3     &trans       &trans  &trans      &trans  &trans  &trans  &trans
                        &kp N0  &kp MINUS  &kp EQUAL    &trans  &trans      &trans
            >;
        };

        mouse_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans          &trans          &trans        &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans          &msc SCRL_DOWN  &msc SCRL_UP  &trans           &trans  &trans
                        &trans  &trans  &trans    &trans          &trans          &trans
            >;
        };

        raise_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans    &trans  &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans    &trans  &trans     &trans  &trans
                        &trans  &trans  &trans    &trans    &trans    &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        dummy_mac_win {
            if-layers = <3 1>;
            then-layer = <2>;
        };
    };
};

