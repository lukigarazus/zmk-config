/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        hold_layer: hold_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    combos {
        compatible = "zmk,combos";

        toggle_win {
            bindings = <&tog 3>;
            key-positions = <20 21 22 23>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC    &kp Q  &kp W  &kp F     &kp P                &kp B                  &kp J    &kp L  &kp U      &kp Y    &trans    &kp BSPC
&mo 1      &kp A  &kp R  &kp S     &kp T                &kp G                  &kp M    &kp N  &kp E      &kp I    &kp O     &kp RET
&kp LSHFT  &kp Z  &kp X  &kp C     &kp D                &kp V                  &kp K    &kp H  &kp COMMA  &kp DOT  &kp FSLH  &kp RSHIFT
                         &kp LGUI  &hold_layer 6 SPACE  &hold_layer 5 SPACE    &kp RET  &mo 4  &kp RALT
            >;
        };

        mac_shortcut_layer {
            bindings = <
&trans  &kp LG(Q)  &kp LG(W)  &kp LC(E)  &kp LG(R)  &kp LG(T)    &kp LG(Y)  &kp LG(U)  &kp LG(I)      &kp LG(O)    &kp LG(P)      &trans
&trans  &kp LG(A)  &kp LC(S)  &kp LC(D)  &kp LC(F)  &kp LC(G)    &kp LEFT   &kp DOWN   &kp UP         &kp RIGHT    &trans         &trans
&trans  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(B)    &kp LG(N)  &kp LG(M)  &kp LG(COMMA)  &kp LG(DOT)  &kp LG(SLASH)  &trans
                              &trans     &trans     &trans       &trans     &trans     &trans
            >;
        };

        win_shortcut_layer {
            bindings = <
&trans  &kp LG(Q)  &kp LG(W)  &kp LC(E)  &kp LG(R)  &kp LG(T)    &kp LG(Y)  &kp LG(U)  &kp LG(I)      &kp LG(O)    &kp LG(P)      &trans
&trans  &kp R      &kp LC(S)  &kp LC(D)  &kp LC(F)  &kp LC(G)    &kp LEFT   &kp DOWN   &kp UP         &kp RIGHT    &trans         &trans
&trans  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(B)    &kp LG(N)  &kp LG(M)  &kp LG(COMMA)  &kp LG(DOT)  &kp LG(SLASH)  &trans
                              &trans     &trans     &trans       &trans     &trans     &trans
            >;
        };

        win_dummy_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        numpad_layer {
            bindings = <
&trans  &trans  &kp N7  &kp N8  &kp N9  &trans    &trans  &trans      &trans  &trans  &trans  &trans
&trans  &trans  &kp N4  &kp N5  &kp N6  &trans    &trans  &kp RSHIFT  &trans  &trans  &trans  &trans
&trans  &trans  &kp N1  &kp N2  &kp N3  &trans    &trans  &trans      &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans      &trans
            >;
        };

        mouse_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans          &trans          &trans        &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans          &msc SCRL_DOWN  &msc SCRL_UP  &trans           &trans  &trans
                        &trans  &trans  &trans    &trans          &trans          &trans
            >;
        };

        raise_layer {
            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                             &kp LGUI  &trans    &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        dummy_mac_win {
            if-layers = <3 1>;
            then-layer = <2>;
        };
    };
};

